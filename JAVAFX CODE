import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class RestaurantManagementUI extends Application {
  // Initialize variables for menu items and prices
static String[] menuItems = {"Pizza", "Pasta", "Salad", "Sandwich", "Soup"};
static double[] menuPrices = {12.99, 10.99, 8.99, 9.99, 7.99};

// Initialize map for storing order modifications
static Map<String, String> orderModifications = new HashMap<String, String>();

public static void main(String[] args) {
launch(args);
}

@Override
public void start(Stage primaryStage) {
primaryStage.setTitle("Restaurant Management System");
// Create scene for login screen
BorderPane loginPane = new BorderPane();
loginPane.setPadding(new Insets(10, 50, 50, 50));

GridPane grid = new GridPane();
grid.setAlignment(Pos.CENTER);
grid.setHgap(10);
grid.setVgap(10);
grid.setPadding(new Insets(25, 25, 25, 25));

Text sceneTitle = new Text("Welcome to the restaurant management system");
sceneTitle.setId("welcome-text");
loginPane.setTop(sceneTitle);
BorderPane.setAlignment(sceneTitle, Pos.TOP_CENTER);

Label usernameLabel = new Label("Username:");
grid.add(usernameLabel, 0, 1);

TextField usernameField = new TextField();
grid.add(usernameField, 1, 1);

Label passwordLabel = new Label("Password:");
grid.add(passwordLabel, 0, 2);

PasswordField passwordField = new PasswordField();
grid.add(passwordField, 1, 2);

Button loginButton = new Button("Log In");
HBox hbBtn = new HBox(10);
hbBtn.setAlignment(Pos.BOTTOM_RIGHT);
hbBtn.getChildren().add(loginButton);
grid.add(hbBtn, 1, 4);

loginPane.setCenter(grid);

Scene loginScene = new Scene(loginPane, 600, 400);
loginScene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
primaryStage.setScene(loginScene);
primaryStage.show();

// Set up event handler for login button
loginButton.setOnAction(e -> {
  String username = usernameField.getText();
  String password = passwordField.getText();
  if (authenticate(username, password)) {
    String role = getRole(username);
    primaryStage.setScene(createMenuScene(username, role, primaryStage));
  } else {
    // Show error message
  }
});
}

// Method for creating the scene for the menu screen
public static Scene createMenuScene(String username, String role, Stage primaryStage) {
BorderPane menuPane = new BorderPane();
menuPane.setPadding(new Insets(10, 50, 50, 50));
Text sceneTitle = new Text("Welcome, " + username + "! Here is our menu: ");
sceneTitle.setId("welcome-text");
menuPane.setTop(sceneTitle);
BorderPane.setAlignment(sceneTitle, Pos.TOP_CENTER);
// Set up table for displaying menu items
TableView<MenuItem> menuTable = new TableView<>();
TableColumn<MenuItem, String> itemColumn = new TableColumn<>("Item");
itemColumn.setMinWidth(100);
itemColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
TableColumn<MenuItem, Double> priceColumn = new TableColumn<>("Price");
priceColumn.setMinWidth(100);
priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));

menuTable.getColumns().addAll(itemColumn, priceColumn);
for (int i = 0; i < menuItems.length; i++) {
  menuTable.getItems().add(new MenuItem(menuItems[i], menuPrices[i]));
}

VBox menuBox = new VBox();
menuBox.getChildren().add(menuTable);
menuPane.setCenter(menuBox);

// Set up form for entering order details
GridPane orderForm = new GridPane();
orderForm.setAlignment(Pos.CENTER);
orderForm.setHgap(10);
orderForm.setVgap(10);
orderForm.setPadding(new Insets(25, 25, 25, 25));

Label itemLabel = new Label("Item:");
orderForm.add(itemLabel, 0, 1);
ComboBox<String> itemField = new ComboBox<>();
itemField.getItems().addAll(menuItems);
orderForm.add(itemField, 1, 1);

Label quantityLabel = new Label("Quantity:");
orderForm.add(quantityLabel, 0, 2);
Spinner<Integer> quantityField = new Spinner<>(1, 10, 1);
orderForm.add(quantityField, 1, 2);

Label modificationsLabel = new Label("Modifications:");
orderForm.add(modificationsLabel, 0, 3);
TextField modificationsField = new TextField();
orderForm.add(modificationsField, 1, 3);

Button addButton = new Button("Add to Order");
addButton.setOnAction(e -> {
  String itemName = itemField.getValue();
  int quantity = quantityField.getValue();
  String modifications = modificationsField.getText();
  if (modifications.length() > 0) {
    orderModifications.put(itemName, modifications);
  }
  // Add item to order and update total
});
orderForm.add(addButton, 1, 4);

menuBox.getChildren().add(orderForm);

// Set up form for entering delivery/pickup details
GridPane deliveryForm = new GridPane();
deliveryForm.setAlignment(Pos.CENTER);
deliveryForm.setHgap(10);
deliveryForm.setVgap(10);
deliveryForm.setPadding(new Insets(25, 25, 25, 25));

Label deliveryLabel = new Label
("Delivery:");
deliveryForm.add(deliveryLabel, 0, 1);
ToggleGroup deliveryGroup = new ToggleGroup();
RadioButton pickupButton = new RadioButton("Pickup");
pickupButton.setToggleGroup(deliveryGroup);
pickupButton.setSelected(true);
RadioButton deliveryButton = new RadioButton("Delivery");
deliveryButton.setToggleGroup(deliveryGroup);
deliveryForm.add(pickupButton, 1, 1);
deliveryForm.add(deliveryButton, 2, 1);
Label addressLabel = new Label("Address:");
deliveryForm.add(addressLabel, 0, 2);
TextField addressField = new TextField();
deliveryForm.add(addressField, 1, 2);

Label phoneLabel = new Label("Phone:");
deliveryForm.add(phoneLabel, 0, 3);
TextField phoneField = new TextField();
deliveryForm.add(phoneField, 1, 3);

menuBox.getChildren().add(deliveryForm);

// Set up form for entering payment details
GridPane paymentForm = new GridPane();
paymentForm.setAlignment(Pos.CENTER);
paymentForm.setHgap(10);
paymentForm.setVgap(10);
paymentForm.setPadding(new Insets(25, 25, 25, 25));

Label paymentLabel = new Label("Payment:");
paymentForm.add(paymentLabel, 0, 1);
ComboBox<String> paymentField = new ComboBox<>();
paymentField.getItems().addAll("Credit Card", "Saved Payment Method");
paymentField.setValue("Credit Card");
paymentForm.add(paymentField, 1, 1);

Label cardLabel = new Label("Card Number:");
paymentForm.add(cardLabel, 0, 2);
TextField cardField = new TextField();
paymentForm.add(cardField, 1, 2);

Label expLabel = new Label("Expiration Date:");
paymentForm.add(expLabel, 0, 3);
TextField expField = new TextField();
paymentForm.add(expField, 1, 3);

Label cvcLabel = new Label("CVC:");
paymentForm.add(cvcLabel, 0, 4);
TextField cvcField = new TextField();
paymentForm.add(cvcField, 1, 4);

// Set up event handler for payment method selection
paymentField.setOnAction(e -> {
  String paymentMethod = paymentField.getValue();
  if (paymentMethod.equalsIgnoreCase("credit card")) {
    cardField.setDisable(false);
    expField.setDisable(false);
    cvcField.setDisable(false);
  } else {
    cardField.setDisable(true);
    expField.setDisable(true);
    cvcField.setDisable(true);
  }
});

menuBox.getChildren().add(paymentForm);

// Set up form for entering loyalty points
GridPane loyaltyForm = new GridPane();
loyaltyForm.setAlignment(Pos.CENTER);
loyaltyForm.setHgap(10);
loyaltyForm.setVgap(10);
loyaltyForm.setPadding(new Insets(25, 25, 25, 25));

Label loyaltyLabel = new Label("Loyalty Points:");
loyaltyForm.add(loyaltyLabel, 0, 1);
Spinner<Integer> loyaltyField = new Spinner<>(0, 1000, 0);
loyaltyForm.add(loyaltyField, 1, 1);

Button applyPointsButton = new Button("Apply Points");
applyPointsButton.setOnAction(e -> {
  // Apply loyalty points and update total
});
loyaltyForm.add(applyPointsButton, 1, 2);

menuBox.getChildren().add(loyaltyForm);

// Set up form for submitting order
HBox submitBox = new HBox();
submitBox.setAlignment(Pos.BOTTOM_RIGHT);
Button submitButton = new Button("Submit Order");
submitButton.setOnAction(e -> {
  // Submit order and show confirmation screen
  primaryStage.setScene(createConfirmationScene(primaryStage));
});
submitBox.getChildren().add(submitButton);

menuBox.getChildren().add(submitBox);

Scene menuScene = new Scene(menuPane, 600, 400);
menuScene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
return menuScene;
}

// Method for creating the scene for the confirmation screen
public static Scene createConfirmationScene(Stage primaryStage) {
BorderPane confirmationPane = new BorderPane();
confirmationPane.setPadding(new Insets(10, 50, 50, 50));

Text sceneTitle = new Text("Thank you for your order!");
sceneTitle.setId("welcome-text");
confirmationPane.setTop(sceneTitle);
BorderPane.setAlignment(sceneTitle, Pos.TOP_CENTER);

// Display order details
VBox confirmationBox = new VBox();
for (String item : orderModifications.keySet()) {
  Text itemText = new Text(item + ": " + orderModifications.get(item));
  confirmationBox.getChildren().add(itemText);
}
confirmationBox.getChildren().add(new Text("Total: $" + total));
confirmationPane.setCenter(confirmationBox);

Button newOrderButton = new Button("Place New Order");
newOrderButton.setOnAction(e -> {
  // Reset order and go back to menu screen
  orderModifications.clear();
  total = 0;
  primaryStage.setScene(createMenuScene(username, role, primaryStage));
});
confirmationBox.getChildren().add(newOrderButton);

Scene confirmationScene = new Scene(confirmationPane, 600, 400);
confirmationScene.getStylesheets().add(getClass().getResource("style.css").toExternalForm());
return confirmationScene;
}
}

// Class for storing menu item data
class MenuItem {
private final SimpleStringProperty name;
private final SimpleDoubleProperty price;

public MenuItem(String name, double price) {
this.name = new SimpleStringProperty(name);
this.price = new SimpleDoubleProperty(price);
}

public String getName() {
return name.get();
}

public void setName(String name) {
this.name.set(name);
}

public Double getPrice() {
return price.get();
}

public void setPrice(Double price) {
this.price.set(price);
}
}
